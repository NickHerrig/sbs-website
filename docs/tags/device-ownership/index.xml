<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>device ownership on Shallow Brook Software</title>
    <link>https://shallowbrooksoftware.com/tags/device-ownership/</link>
    <description>Recent content in device ownership on Shallow Brook Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shallowbrooksoftware.com/tags/device-ownership/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Device Ownership 005: Longan Nano - Programming the Device</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-005/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-005/</guid>
      <description>Programming the device We now have all the information we need to download our smallest.bin program on the device. Remember from before that dfu-util shows us two alternative settings for upgrading firmware. Since we want to program the chip&amp;rsquo;s internal flash, we will need to specify the correct &amp;ldquo;alt&amp;rdquo; identifier (which is 0 in this case). Lastly, we need to specify the &amp;ldquo;range&amp;rdquo; of the Longan Nano&amp;rsquo;s flash storage: where it begins in memory and how large it is.</description>
    </item>
    
    <item>
      <title>Device Ownership 004: Setup - Accessing USB Devices</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-004/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-004/</guid>
      <description>Identifying the device The ability to interact with most USB devices on Linux systems is restricted to the root user. However, the udev device manager exists to enable more granular access to specific devices for non-root users. In our case, we want to be able to perform read and write operations on the Longan Nano.
Udev looks for special &amp;ldquo;rules&amp;rdquo; files in multiple system directories. The one we care about is /etc/udev/rules.</description>
    </item>
    
    <item>
      <title>Device Ownership 003: Setup - Device Firmware Upgrade</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-003/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-003/</guid>
      <description>Preparing for DFU Without our assembled smallest.bin file in hand, the next step is to hook up our Longan Nano and upload the program to the chip&amp;rsquo;s flash storage. To accomplish this task, we must use the Device Firmware Upgrade protocol. This protocol enables a very simple method for upgrading the firmware of devices connected to your system over USB. If you are curious about the details, the official specification for DFU can be found here.</description>
    </item>
    
    <item>
      <title>Device Ownership 002: Setup - RISC-V Assembler</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-002/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-002/</guid>
      <description>Ready, set, assemble! This post details the steps necessary to &amp;ldquo;assemble&amp;rdquo; our simple program. Assembling is the process of converting human-readable assembly language text to a specific binary representation that a CPU can understand.
To start, we create a directory to hold the our project&amp;rsquo;s development files. In an open terminal window:
mkdir device_ownership cd device_ownership/  Then, since the assembler we are going to use is written in Python, we will install all of the system packages necessary to install additional Python modules.</description>
    </item>
    
    <item>
      <title>Device Ownership 001: Longan Nano - Getting Started</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-001/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-001/</guid>
      <description>Introduction The Sipeed Longan Nano is a small, affordable, 32-bit RISC-V chip. Despite its minimalism, the Longan Nano provides enough power and peripherals to learn RISC-V assembly and build exciting programs along the way.
The Longan Nano comes with the following components:
 108 MHz GigaDevice GD32VF103[CBT6] 32-bit CPU 128 KB flash storage 32 KB sram memory 3 LEDs (red, green, and blue) 1 USB Type-C port 1 microSD card slot 160x80 pixel LCD (0.</description>
    </item>
    
    <item>
      <title>Device Ownership 000: Introduction</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-000/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-000/</guid>
      <description>Is there a problem with modern software? There has been a lot of buzz surrounding the slowness, instability, and complexity of modern software systems. It seems as though more and more people are feeling and observing bloat and bugginess in their day-to-day usage of computers. In many situations, the mediocrity of today&amp;rsquo;s technology has become so common that it isn&amp;rsquo;t even seen as an issue.
During my few years spent in industry, these sort of quotes were heard almost daily:</description>
    </item>
    
  </channel>
</rss>