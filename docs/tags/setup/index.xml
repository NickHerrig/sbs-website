<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>setup on Shallow Brook Software</title>
    <link>https://shallowbrooksoftware.com/tags/setup/</link>
    <description>Recent content in setup on Shallow Brook Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shallowbrooksoftware.com/tags/setup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Device Ownership 004: Setup - Accessing USB Devices</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-004/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-004/</guid>
      <description>Identifying the device The ability to interact with most USB devices on Linux systems is restricted to the root user. However, the udev device manager exists to enable more granular access to specific devices for non-root users. In our case, we want to be able to perform read and write operations on the Longan Nano.
Udev looks for special &amp;ldquo;rules&amp;rdquo; files in multiple system directories. The one we care about is /etc/udev/rules.</description>
    </item>
    
    <item>
      <title>Device Ownership 003: Setup - Device Firmware Upgrade</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-003/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-003/</guid>
      <description>Preparing for DFU Without our assembled smallest.bin file in hand, the next step is to hook up our Longan Nano and upload the program to the chip&amp;rsquo;s flash storage. To accomplish this task, we must use the Device Firmware Upgrade protocol. This protocol enables a very simple method for upgrading the firmware of devices connected to your system over USB. If you are curious about the details, the official specification for DFU can be found here.</description>
    </item>
    
    <item>
      <title>Device Ownership 002: Setup - RISC-V Assembler</title>
      <link>https://shallowbrooksoftware.com/posts/device-ownership-002/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/device-ownership-002/</guid>
      <description>Ready, set, assemble! This post details the steps necessary to &amp;ldquo;assemble&amp;rdquo; our simple program. Assembling is the process of converting human-readable assembly language text to a specific binary representation that a CPU can understand.
To start, we create a directory to hold the our project&amp;rsquo;s development files. In an open terminal window:
mkdir device_ownership cd device_ownership/  Then, since the assembler we are going to use is written in Python, we will install all of the system packages necessary to install additional Python modules.</description>
    </item>
    
  </channel>
</rss>