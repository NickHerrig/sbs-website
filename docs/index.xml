<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shallow Brook Software</title>
    <link>https://shallowbrooksoftware.com/</link>
    <description>Recent content on Shallow Brook Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shallowbrooksoftware.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ideas for Maximizing RISC-V&#39;s Potential</title>
      <link>https://shallowbrooksoftware.com/posts/ideas-for-maximizing-riscvs-potential/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/ideas-for-maximizing-riscvs-potential/</guid>
      <description>There has been a lot of buzz surrounding the slowness, instability, and complexity of modern software systems. It seems as though more and more people are feeling and observing bloat and bugginess in their day-to-day usage of computers. In many situations, the mediocrity of today&amp;rsquo;s technology has become so common that it isn&amp;rsquo;t even seen as an issue.
During my few years spent in industry, these sort of quotes were heard almost daily:</description>
    </item>
    
    <item>
      <title>Designing Python Web Servers</title>
      <link>https://shallowbrooksoftware.com/posts/designing-python-web-servers/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/designing-python-web-servers/</guid>
      <description>I&amp;rsquo;ve spent the last few days designing and benchmarking extremely minimal pure-Python web servers. There is a tech myth / superstition that exposing python web servers to the internet is a bad idea but I&amp;rsquo;ve seen little to no evidence as to why this is supposedly the case. Are they too slow? Are they too insecure for some reason? One thing is for sure: performance must always be measured, not guessed.</description>
    </item>
    
    <item>
      <title>Wrapping Up Squeaky</title>
      <link>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</guid>
      <description>My primary project for the last month or so has a been a proof of concept programming language called Squeaky. I&amp;rsquo;ve had this idea in my head for a few years: build a functional language in C with a focus on game development. I wanted window creation, OpenGL graphics, and input events to all be first class citizens of the language and not optional libraries to be pulled in later. Cross-platform portability was important, too.</description>
    </item>
    
    <item>
      <title>Revamping My Old CHIP-8 Emulator</title>
      <link>https://shallowbrooksoftware.com/posts/revamping-my-old-chip8-emulator/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/revamping-my-old-chip8-emulator/</guid>
      <description>Back in 2017 I was really interested in emulator development. I read that CHIP-8 was a great introductory system and decided to write my own emulator for it. I was a C programming novice at the time but figured it&amp;rsquo;d still be a good choice for a project that dealt with a lot of low-level details and mechanics. After a few weeks of work I was able to successfully emulate CHIP-8 games but knew that there were some lingering bugs.</description>
    </item>
    
    <item>
      <title>Loading OpenGL Functions for Fun and Profit</title>
      <link>https://shallowbrooksoftware.com/posts/loading-opengl-fuctions-for-fun-and-profit/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/loading-opengl-fuctions-for-fun-and-profit/</guid>
      <description>While writing my previous blog post, I realized that there is a general information gap around dynamically loading OpenGL functions. When developers encounter this task on new OpenGL-related projects, they tend to reach for a premade loader such as glew, gl3w, glLoadGen, or GLAD. A more detailed list along with an overview of what all these libraries do can be found here.
&amp;ldquo;An OpenGL Loading Library is a library that loads pointers to OpenGL functions at runtime, core as well as extensions.</description>
    </item>
    
    <item>
      <title>A Multi-Platform Modern OpenGL Demo with SDL2</title>
      <link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</guid>
      <description>This post is largely inspired by Chris Wellons&amp;rsquo; 2015 blog post about writing a modern OpenGL demo that works on all three major desktop platforms (Windows, macOS, and Linux). I have come back to his post countless times over the years when looking for guidance on how to build any cross-platform C program.
In Chris&amp;rsquo; version of this demo he makes use of GLFW3 for the window and input handling and uses gl3w for loading OpenGL functions.</description>
    </item>
    
    <item>
      <title>Bare-Metal Assembly on the Longan Nano</title>
      <link>https://shallowbrooksoftware.com/posts/bare-metal-assembly-on-the-longan-nano/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/posts/bare-metal-assembly-on-the-longan-nano/</guid>
      <description>The Sipeed Longan Nano is a small, affordable, 32-bit RISC-V chip. Despite its minimalism, the Longan Nano provides enough power and peripherals to learn RISC-V assembly and build exciting programs along the way.
The Longan Nano comes with the following components:
 GigaDevice GD32VF103[CBT6] 32-bit CPU 8 MHz default clock speed (IRC8M) 108 MHz maximum clock speed 128 KB flash storage 32 KB sram memory 3 LEDs (red, green, and blue) 1 USB Type-C port 1 microSD card slot 160x80 pixel LCD (0.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://shallowbrooksoftware.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/about/</guid>
      <description>Welcome to Shallow Brook Software!
My name is Andrew Dailey and I&amp;rsquo;m an independent programmer from Des Moines, Iowa. I have a Bachelor of Science degree in Software Engineering from Iowa State University. I have multiple years of industry experience working a variety of positions including Linux system administration, Python-based ETL, and small-scale cluster automation. Software development is one of my primary hobbies and I tend to specialize in backend / systems programming.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://shallowbrooksoftware.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shallowbrooksoftware.com/projects/</guid>
      <description>Bronzebeard (source, example) Bronzebeard is a collection of tools for writing RISC-V assembly and working with hobbyist development devices. It is designed for programs that will run on bare metal with no reliance on an operating systems, frameworks, SDKs, or existing software of any kind. A simple, standalone assembler is the centerpiece. It has been written in order to be free from large, complex toolchains. This keeps the project portable, minimal, and easy to understand.</description>
    </item>
    
  </channel>
</rss>